name: Go Test Coverage Report On Pull Request
on:
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@85e6279cec87321a52edac9c87bce653a07cf6c2
      - name: Enable Corepack
        run: corepack enable

      - name: Set Node.js 24.x
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020
        with:
          node-version: 24.x
          cache: "yarn"
          working-directory: ./app

      # TODO: Test frontend

      - name: Build Frontend
        id: build-frontend
        run: yarn build

      - name: Setup Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5
        with:
          go-version-file: go.mod
      - name: Install dependencies
        run: go mod vendor

      # Need to build frontend also for this to work, due to filesystem embedding
      #      - name: Build Frontend
      #        id: build-frontend
      #        run: go build -v -a -installsuffix cgo -o runtime_binary ./cmd/frontend
      - name: Test with the Go CLI
        if: always()
        id: test
        run: go test -coverprofile=unit.coverage.out ./...
      - name: Upload coverage report
        if: always()
        id: coverage
        env:
          CODACY_API_TOKEN: ${{ secrets.CODACY_API_TOKEN }}
          CODACY_ORGANIZATION_PROVIDER: gh
          CODACY_USERNAME: ${{ github.repository_owner }}
          CODACY_PROJECT_NAME: ${{ github.event.repository.name }}
        run: |
          bash <(curl -Ls https://coverage.codacy.com/get.sh) report \
              --force-coverage-parser go -r unit.coverage.out
      - name: report
        uses: actions/github-script@5ee2b97722aeebb4c5d5c867345a6745cd868065
        if: always()
        env:
          BUILD_RESULT: ${{ steps.build.outputs.stdout }}
          TEST_RESULT: ${{ steps.test.outputs.stdout }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Golang Build & Test status')
            })

            // 2. Prepare format of the comment
            const output = `## Golang Build & Test status ðŸš€

            #### Go Build Frontend Webclient Outcome ðŸ”¨\`${{ steps.build-server.outcome }}\`

            #### Go Test Outcome ðŸ§ª\`${{ steps.test.outcome }}\`

            #### Coverage Report ðŸ“Š\`${{ steps.coverage.outcome }}\`

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
